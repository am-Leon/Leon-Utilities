package am.leon.utilities.common.domain.repository.local.keyValue

import java.lang.reflect.Type

interface IStorageKeyValue {
    /**
     * Get secured value is used to decrypt the data after extracting it from local storage using cryptographic key generated by keyAlias.
     *
     * @param storageKey the key which holds the encrypted value.
     * @param keyAlias the value used to get/create crypto key and use it to encrypt the date.
     * @return the encrypted value.
     */
    suspend fun getSecuredValue(storageKey: IStorageKeyEnum, keyAlias: String): ByteArray

    /**
     * Set secured value is used to encrypt any value before storing in local storage using cryptographic key generated by keyAlias.
     *
     * @param storageKey the key which holds the encrypted value.
     * @param keyAlias the value used to get/create crypto key and use it to encrypt the date.
     */
    suspend fun saveSecuredValue(storageKey: IStorageKeyEnum, keyAlias: String, value: ByteArray)

    suspend fun getString(storageKey: IStorageKeyEnum): String
    suspend fun saveString(storageKey: IStorageKeyEnum, value: String)
    suspend fun clearString(storageKey: IStorageKeyEnum)

    suspend fun getInt(storageKey: IStorageKeyEnum): Int?
    suspend fun saveInt(storageKey: IStorageKeyEnum, value: Int)
    suspend fun clearInt(storageKey: IStorageKeyEnum)

    suspend fun getBoolean(storageKey: IStorageKeyEnum): Boolean?
    suspend fun saveBoolean(storageKey: IStorageKeyEnum, value: Boolean)

    suspend fun <Model> getModelBasedOnType(storageKey: IStorageKeyEnum, tokenType: Type): Model?
    suspend fun <Model> saveModelBasedOnType(storageKey: IStorageKeyEnum, value: Model)

    suspend fun hasKey(storageKey: IStorageKeyEnum): Boolean
    suspend fun clearAllEntries()
}